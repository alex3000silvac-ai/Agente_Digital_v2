#!/usr/bin/env python3
"""
Script para actualizar correctamente las secciones de las evidencias del incidente 17
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import get_db_connection

def actualizar_secciones():
    """Actualiza las secciones de las evidencias"""
    
    incidente_id = 17
    print(f"üîß ACTUALIZANDO SECCIONES DE EVIDENCIAS DEL INCIDENTE {incidente_id}")
    print("=" * 60)
    
    conn = None
    try:
        conn = get_db_connection()
        if not conn:
            print("‚ùå Error de conexi√≥n a BD")
            return
            
        cursor = conn.cursor()
        
        # Mapeo de evidencias a secciones basado en el diagn√≥stico
        actualizaciones = [
            # Secci√≥n 2 - Descripci√≥n
            (24, 'tablas_bd.txt', '2'),  # ID 24
            (25, 'incidente.txt', '2'),  # ID 25
            # Secci√≥n 3 - An√°lisis
            (26, 'TAXONOMIA_TABLA.txt', '3'),  # ID 26 (uno de los duplicados)
            # Secci√≥n 4 - Acciones
            (27, 'README_EMERGENCIA.md', '4'),  # Si existe
            # Secci√≥n 5 - An√°lisis Final
            # Dejar vac√≠o por ahora
        ]
        
        print("\n1Ô∏è‚É£ ACTUALIZANDO SECCIONES...")
        
        # Primero actualizar la secci√≥n 3 para el primer TAXONOMIA_TABLA.txt
        cursor.execute("""
            UPDATE EvidenciasIncidentes 
            SET Seccion = '3', Descripcion = 'An√°lisis de taxonom√≠as'
            WHERE IncidenteID = ? AND EvidenciaID = 26
        """, (incidente_id,))
        print("   ‚úÖ TAXONOMIA_TABLA.txt movido a secci√≥n 3 (An√°lisis)")
        
        # Actualizar secciones generales
        cursor.execute("""
            UPDATE EvidenciasIncidentes 
            SET Seccion = '2'
            WHERE IncidenteID = ? AND EvidenciaID IN (24, 25)
        """, (incidente_id,))
        print("   ‚úÖ Archivos de descripci√≥n actualizados a secci√≥n 2")
        
        # Verificar si hay README_EMERGENCIA.md
        cursor.execute("""
            SELECT EvidenciaID FROM EvidenciasIncidentes 
            WHERE IncidenteID = ? AND NombreArchivo = 'README_EMERGENCIA.md'
        """, (incidente_id,))
        readme = cursor.fetchone()
        if readme:
            cursor.execute("""
                UPDATE EvidenciasIncidentes 
                SET Seccion = '4', Descripcion = 'Acciones inmediatas'
                WHERE IncidenteID = ? AND EvidenciaID = ?
            """, (incidente_id, readme[0]))
            print("   ‚úÖ README_EMERGENCIA.md movido a secci√≥n 4 (Acciones)")
        
        # Eliminar el duplicado de TAXONOMIA_TABLA.txt
        cursor.execute("""
            DELETE FROM EvidenciasIncidentes 
            WHERE IncidenteID = ? AND EvidenciaID = 27
        """, (incidente_id,))
        print("   ‚úÖ Duplicado de TAXONOMIA_TABLA.txt eliminado")
        
        conn.commit()
        
        # 2. VERIFICAR CAMBIOS
        print("\n2Ô∏è‚É£ VERIFICANDO DISTRIBUCI√ìN FINAL...")
        cursor.execute("""
            SELECT Seccion, COUNT(*) as Total, 
                   STRING_AGG(NombreArchivo, ', ') as Archivos
            FROM EvidenciasIncidentes 
            WHERE IncidenteID = ?
            GROUP BY Seccion
            ORDER BY Seccion
        """, (incidente_id,))
        
        for row in cursor.fetchall():
            seccion, total, archivos = row
            print(f"   Secci√≥n {seccion}: {total} archivos - {archivos}")
        
        # 3. AGREGAR EVIDENCIA DE TAXONOM√çA SI NO EXISTE
        print("\n3Ô∏è‚É£ VERIFICANDO EVIDENCIAS DE TAXONOM√çA...")
        cursor.execute("""
            SELECT COUNT(*) FROM EVIDENCIAS_TAXONOMIA WHERE IncidenteID = ?
        """, (incidente_id,))
        
        num_ev_tax = cursor.fetchone()[0]
        if num_ev_tax == 0:
            print("   ‚ö†Ô∏è No hay evidencias de taxonom√≠a, agregando archivo existente...")
            
            # Obtener la taxonom√≠a asignada
            cursor.execute("""
                SELECT Id_Taxonomia FROM INCIDENTE_TAXONOMIA WHERE IncidenteID = ?
            """, (incidente_id,))
            taxonomia = cursor.fetchone()
            
            if taxonomia:
                tax_id = taxonomia[0]
                # Asignar TAXONOMIA_TABLA.txt a la taxonom√≠a
                cursor.execute("""
                    INSERT INTO EVIDENCIAS_TAXONOMIA 
                    (IncidenteID, Id_Taxonomia, NumeroEvidencia, NombreArchivo, 
                     RutaArchivo, Descripcion, FechaSubida, SubidoPor)
                    SELECT ?, ?, '4.4.1.1', NombreArchivo, RutaArchivo, 
                           'Evidencia de taxonom√≠a', GETDATE(), 'Sistema'
                    FROM EvidenciasIncidentes
                    WHERE IncidenteID = ? AND NombreArchivo = 'TAXONOMIA_TABLA.txt'
                    AND EvidenciaID = (
                        SELECT MIN(EvidenciaID) FROM EvidenciasIncidentes 
                        WHERE IncidenteID = ? AND NombreArchivo = 'TAXONOMIA_TABLA.txt'
                    )
                """, (incidente_id, tax_id, incidente_id, incidente_id))
                
                if cursor.rowcount > 0:
                    print(f"   ‚úÖ TAXONOMIA_TABLA.txt agregado como evidencia de taxonom√≠a {tax_id}")
                    conn.commit()
        
        print("\n‚úÖ PROCESO COMPLETADO")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        if conn:
            conn.rollback()
        
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    actualizar_secciones()