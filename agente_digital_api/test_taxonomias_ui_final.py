#!/usr/bin/env python3
"""
Test final de taxonom√≠as - Verificar que se muestren en UI
"""

import requests
import json

def test_cargar_incidente_completo():
    """Probar el endpoint cargar_completo para ver qu√© devuelve"""
    try:
        print("üß™ TEST ENDPOINT CARGAR COMPLETO")
        print("=" * 70)
        
        # Simular llamada al endpoint
        incidente_id = 22
        
        # Ejecutar la l√≥gica del endpoint directamente
        from app.views.incidente_cargar_completo import cargar_incidente_completo_logica
        
        resultado = cargar_incidente_completo_logica(incidente_id)
        
        print(f"\nüìä RESULTADO DEL ENDPOINT:")
        
        # Verificar taxonom√≠as
        if 'taxonomias_seleccionadas' in resultado:
            taxonomias = resultado['taxonomias_seleccionadas']
            print(f"\nüè∑Ô∏è Taxonom√≠as encontradas: {len(taxonomias)}")
            
            for i, tax in enumerate(taxonomias, 1):
                print(f"\n{i}. Taxonom√≠a: {tax.get('Id_Taxonomia', 'SIN ID')}")
                print(f"   - Comentarios raw: {tax.get('Comentarios', 'NO HAY')[:50]}...")
                print(f"   - Justificaci√≥n parseada: {tax.get('justificacion', 'NO PARSEADA')}")
                print(f"   - Descripci√≥n parseada: {tax.get('descripcionProblema', 'NO PARSEADA')}")
                print(f"   - Fecha: {tax.get('FechaAsignacion', 'SIN FECHA')}")
                
                # Verificar si tiene los campos necesarios para el frontend
                if tax.get('justificacion') or tax.get('descripcionProblema'):
                    print(f"   ‚úÖ CAMPOS PARSEADOS CORRECTAMENTE")
                else:
                    print(f"   ‚ùå FALTAN CAMPOS PARSEADOS")
        else:
            print("‚ùå No se encontraron taxonom√≠as en el resultado")
        
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return None

def verificar_formato_frontend():
    """Verificar que el formato sea el esperado por el frontend"""
    print(f"\nüé® VERIFICANDO FORMATO PARA FRONTEND")
    print("=" * 70)
    
    print("\nüìã El frontend espera:")
    print("   taxonomias_seleccionadas: [")
    print("     {")
    print("       id: 'INC_XXX_YYY',")
    print("       justificacion: 'texto justificaci√≥n',")
    print("       descripcionProblema: 'texto descripci√≥n',")
    print("       archivos: [],")
    print("       // otros campos...")
    print("     }")
    print("   ]")
    
    print("\nüìã Con la correcci√≥n, el backend ahora devuelve:")
    print("   taxonomias_seleccionadas: [")
    print("     {")
    print("       Id_Taxonomia: 'INC_XXX_YYY',")
    print("       Comentarios: 'Justificaci√≥n: ... \\nDescripci√≥n del problema: ...',")
    print("       justificacion: 'texto justificaci√≥n', // PARSEADO")
    print("       descripcionProblema: 'texto descripci√≥n', // PARSEADO")
    print("       // otros campos...")
    print("     }")
    print("   ]")

def test_guardado_y_verificacion_ui():
    """Test completo: guardar y verificar que se muestre en UI"""
    try:
        print(f"\nüîÑ TEST COMPLETO: GUARDAR Y VERIFICAR UI")
        print("=" * 70)
        
        from app.database import get_db_connection
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # 1. Guardar taxonom√≠as de prueba
        print("\n1Ô∏è‚É£ Guardando taxonom√≠as de prueba...")
        
        incidente_id = 22
        taxonomias_test = [
            {
                'id': 'INC_USO_PHIP_ECDP',
                'justificacion': 'JUSTIFICACI√ìN VISIBLE EN UI - PRUEBA 1',
                'descripcionProblema': 'DESCRIPCI√ìN VISIBLE EN UI - PRUEBA 1'
            },
            {
                'id': 'INC_CONF_EXCF_FCRA',
                'justificacion': 'JUSTIFICACI√ìN VISIBLE EN UI - PRUEBA 2',
                'descripcionProblema': 'DESCRIPCI√ìN VISIBLE EN UI - PRUEBA 2'
            }
        ]
        
        # Limpiar taxonom√≠as existentes
        cursor.execute("DELETE FROM INCIDENTE_TAXONOMIA WHERE IncidenteID = ?", (incidente_id,))
        
        # Insertar nuevas
        for tax in taxonomias_test:
            comentarios = f"Justificaci√≥n: {tax['justificacion']}\nDescripci√≥n del problema: {tax['descripcionProblema']}"
            cursor.execute("""
                INSERT INTO INCIDENTE_TAXONOMIA 
                (IncidenteID, Id_Taxonomia, Comentarios, FechaAsignacion, CreadoPor)
                VALUES (?, ?, ?, GETDATE(), ?)
            """, (incidente_id, tax['id'], comentarios, 'test_ui_final'))
        
        conn.commit()
        print("   ‚úÖ Taxonom√≠as guardadas")
        
        # 2. Verificar con la l√≥gica del endpoint
        print("\n2Ô∏è‚É£ Verificando con endpoint cargar_completo...")
        
        from app.views.incidente_cargar_completo import cargar_incidente_completo_logica
        resultado = cargar_incidente_completo_logica(incidente_id)
        
        if 'taxonomias_seleccionadas' in resultado:
            taxonomias = resultado['taxonomias_seleccionadas']
            print(f"   ‚úÖ {len(taxonomias)} taxonom√≠as cargadas")
            
            todas_ok = True
            for tax in taxonomias:
                if tax.get('Id_Taxonomia') in ['INC_USO_PHIP_ECDP', 'INC_CONF_EXCF_FCRA']:
                    print(f"\n   üìã {tax['Id_Taxonomia']}:")
                    print(f"      - Justificaci√≥n: {tax.get('justificacion', 'NO ENCONTRADA')}")
                    print(f"      - Descripci√≥n: {tax.get('descripcionProblema', 'NO ENCONTRADA')}")
                    
                    if 'VISIBLE EN UI' in tax.get('justificacion', ''):
                        print(f"      ‚úÖ Datos correctos para mostrar en UI")
                    else:
                        print(f"      ‚ùå Datos incorrectos")
                        todas_ok = False
            
            if todas_ok:
                print("\n‚úÖ TODAS LAS TAXONOM√çAS EST√ÅN LISTAS PARA MOSTRARSE EN UI")
            else:
                print("\n‚ùå HAY PROBLEMAS CON LAS TAXONOM√çAS")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üîç TEST FINAL - TAXONOM√çAS EN UI")
    print("=" * 80)
    
    # 1. Verificar formato esperado
    verificar_formato_frontend()
    
    # 2. Test del endpoint
    test_cargar_incidente_completo()
    
    # 3. Test completo con guardado
    test_guardado_y_verificacion_ui()
    
    print("\n" + "=" * 80)
    print("üéØ RESUMEN:")
    print("   1. Query corregida para incluir IT.Comentarios ‚úÖ")
    print("   2. Backend parsea justificaci√≥n y descripcionProblema ‚úÖ")
    print("   3. Frontend ya est√° preparado para mostrar estos campos ‚úÖ")