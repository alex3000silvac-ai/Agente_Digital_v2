#!/usr/bin/env python3
"""
Script para corregir el encoding del incidente 17 directamente en la BD
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import get_db_connection

def corregir_texto(texto):
    """Corrige texto mal codificado"""
    if not texto:
        return texto
    
    # Reemplazos espec√≠ficos para corregir UTF-8 mal interpretado
    reemplazos = {
        # Vocales con tilde
        '√É¬°': '√°',
        '√É¬©': '√©',
        '√É¬≠': '√≠', 
        '√É¬≥': '√≥',
        '√É¬∫': '√∫',
        '√É¬±': '√±',
        # May√∫sculas
        '√É': '√Å',
        '√É‚Ä∞': '√â',
        '√É': '√ç',
        '√É"': '√ì',
        '√É≈°': '√ö',
        # Casos espec√≠ficos completos
        'taxonom√É¬≠as': 'taxonom√≠as',
        'secci√É¬≥n': 'secci√≥n',
        'descripci√É¬≥n': 'descripci√≥n',
        'informaci√É¬≥n': 'informaci√≥n',
        'configuraci√É¬≥n': 'configuraci√≥n',
        'aplicaci√É¬≥n': 'aplicaci√≥n',
        'exfiltraci√É¬≥n': 'exfiltraci√≥n',
        'exposici√É¬≥n': 'exposici√≥n',
        'tambi√É¬©n': 'tambi√©n',
        'm√É¬°s': 'm√°s',
        'as√É¬≠': 'as√≠',
        'categor√É¬≠a': 'categor√≠a',
        'gesti√É¬≥n': 'gesti√≥n',
        'validaci√É¬≥n': 'validaci√≥n',
        'implementaci√É¬≥n': 'implementaci√≥n',
        'documentaci√É¬≥n': 'documentaci√≥n',
        'autenticaci√É¬≥n': 'autenticaci√≥n',
        'actualizaci√É¬≥n': 'actualizaci√≥n',
        'eliminaci√É¬≥n': 'eliminaci√≥n',
        'integraci√É¬≥n': 'integraci√≥n',
        'mitigaci√É¬≥n': 'mitigaci√≥n',
        'detecci√É¬≥n': 'detecci√≥n',
        'prevenci√É¬≥n': 'prevenci√≥n',
        'evaluaci√É¬≥n': 'evaluaci√≥n',
        'investigaci√É¬≥n': 'investigaci√≥n',
        'clasificaci√É¬≥n': 'clasificaci√≥n',
        'notificaci√É¬≥n': 'notificaci√≥n'
    }
    
    texto_corregido = texto
    for mal, bien in reemplazos.items():
        texto_corregido = texto_corregido.replace(mal, bien)
    
    return texto_corregido

def corregir_incidente():
    """Corrige el encoding del incidente 17"""
    
    incidente_id = 17
    print(f"üîß CORRIGIENDO ENCODING DEL INCIDENTE {incidente_id}")
    print("=" * 60)
    
    conn = None
    try:
        conn = get_db_connection()
        if not conn:
            print("‚ùå Error de conexi√≥n a BD")
            return
            
        cursor = conn.cursor()
        
        # 1. Obtener datos actuales
        print("\n1Ô∏è‚É£ OBTENIENDO DATOS ACTUALES...")
        cursor.execute("""
            SELECT Titulo, DescripcionInicial, AccionesInmediatas, 
                   AnciImpactoPreliminar, AnciTipoAmenaza, CausaRaiz,
                   LeccionesAprendidas, PlanMejora
            FROM Incidentes 
            WHERE IncidenteID = ?
        """, (incidente_id,))
        
        row = cursor.fetchone()
        if not row:
            print("‚ùå Incidente no encontrado")
            return
        
        # 2. Corregir cada campo
        print("\n2Ô∏è‚É£ CORRIGIENDO CAMPOS...")
        campos_corregidos = []
        
        campos = ['Titulo', 'DescripcionInicial', 'AccionesInmediatas', 
                 'AnciImpactoPreliminar', 'AnciTipoAmenaza', 'CausaRaiz',
                 'LeccionesAprendidas', 'PlanMejora']
        
        for i, campo in enumerate(campos):
            valor_original = row[i]
            if valor_original:
                valor_corregido = corregir_texto(valor_original)
                if valor_original != valor_corregido:
                    print(f"   ‚úÖ {campo}:")
                    print(f"      Antes: {valor_original[:50]}...")
                    print(f"      Despu√©s: {valor_corregido[:50]}...")
                    campos_corregidos.append((campo, valor_corregido))
                else:
                    print(f"   ‚ö™ {campo}: Sin cambios necesarios")
        
        # 3. Actualizar en BD
        if campos_corregidos:
            print(f"\n3Ô∏è‚É£ ACTUALIZANDO {len(campos_corregidos)} CAMPOS EN BD...")
            
            for campo, valor in campos_corregidos:
                query = f"UPDATE Incidentes SET {campo} = ? WHERE IncidenteID = ?"
                cursor.execute(query, (valor, incidente_id))
            
            conn.commit()
            print("‚úÖ Cambios guardados exitosamente")
        else:
            print("\n‚úÖ No se necesitaron correcciones")
        
        # 4. Verificar estructura de evidencias
        print("\n4Ô∏è‚É£ VERIFICANDO ESTRUCTURA DE EVIDENCIAS...")
        
        # Verificar columnas disponibles
        cursor.execute("""
            SELECT COLUMN_NAME 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = 'EvidenciasIncidentes'
            ORDER BY ORDINAL_POSITION
        """)
        
        columnas = [row[0] for row in cursor.fetchall()]
        print(f"   Columnas disponibles: {columnas}")
        
        # Buscar evidencias
        cursor.execute("""
            SELECT EvidenciaID, NombreArchivo, Descripcion, Version
            FROM EvidenciasIncidentes 
            WHERE IncidenteID = ?
            ORDER BY EvidenciaID
        """, (incidente_id,))
        
        evidencias = cursor.fetchall()
        print(f"\n   Total evidencias: {len(evidencias)}")
        
        # Agrupar por descripci√≥n para detectar secci√≥n
        evidencias_por_seccion = {
            'descripcion': [],
            'analisis': [],
            'acciones': [],
            'analisis-final': []
        }
        
        for ev in evidencias:
            ev_id, nombre, desc, version = ev
            desc_str = str(desc or '')
            
            # Clasificar por descripci√≥n num√©rica
            if desc_str in ['1', '2']:
                seccion = 'descripcion'
            elif desc_str == '3':
                seccion = 'analisis'
            elif desc_str == '4':
                seccion = 'acciones'
            elif desc_str == '12':
                seccion = 'analisis-final'
            else:
                # Por defecto a descripci√≥n
                seccion = 'descripcion'
            
            evidencias_por_seccion[seccion].append({
                'id': ev_id,
                'nombre': nombre,
                'descripcion': desc,
                'version': version
            })
        
        print("\n   DISTRIBUCI√ìN DE EVIDENCIAS:")
        for seccion, archivos in evidencias_por_seccion.items():
            print(f"   - {seccion}: {len(archivos)} archivos")
            for archivo in archivos:
                print(f"      ‚Ä¢ ID:{archivo['id']} | {archivo['nombre']} | Desc: {archivo['descripcion']}")
        
        # 5. Verificar taxonom√≠as
        print("\n5Ô∏è‚É£ VERIFICANDO TAXONOM√çAS...")
        cursor.execute("""
            SELECT COUNT(*) FROM INCIDENTE_TAXONOMIA WHERE IncidenteID = ?
        """, (incidente_id,))
        num_taxonomias = cursor.fetchone()[0]
        print(f"   Taxonom√≠as asignadas: {num_taxonomias}")
        
        cursor.execute("""
            SELECT COUNT(*) FROM EVIDENCIAS_TAXONOMIA WHERE IncidenteID = ?
        """, (incidente_id,))
        num_ev_tax = cursor.fetchone()[0]
        print(f"   Evidencias de taxonom√≠as: {num_ev_tax}")
        
        print("\n‚úÖ PROCESO COMPLETADO")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        if conn:
            conn.rollback()
        
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    corregir_incidente()