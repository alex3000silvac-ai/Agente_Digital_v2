#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar la base de datos SQL Server
sin dependencias de Flask
"""

def verificar_esquema_usuarios():
    """Verifica si la tabla Usuarios tiene los campos necesarios"""
    print("üîç VERIFICANDO ESQUEMA DE LA TABLA USUARIOS")
    print("="*50)
    
    try:
        import pyodbc
        print("‚úÖ pyodbc est√° disponible")
    except ImportError:
        print("‚ùå pyodbc no est√° instalado")
        print("üí° Instalar con: pip install pyodbc")
        return False
    
    # Configuraci√≥n de conexi√≥n (usar valores por defecto)
    server = 'localhost'
    database = 'AgenteDigitalDB'
    username = 'sa'
    password = ''  # Cambiar seg√∫n tu configuraci√≥n
    driver = 'ODBC Driver 17 for SQL Server'
    
    print(f"üì° Intentando conectar a: {server}/{database}")
    
    try:
        # String de conexi√≥n
        conn_str = f"""
        DRIVER={{{driver}}};
        SERVER={server};
        DATABASE={database};
        UID={username};
        PWD={password};
        TrustServerCertificate=yes;
        """
        
        conn = pyodbc.connect(conn_str)
        print("‚úÖ Conexi√≥n exitosa a SQL Server")
        
        cursor = conn.cursor()
        
        # Verificar si existe la tabla Usuarios
        cursor.execute("""
            SELECT TABLE_NAME 
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_NAME = 'Usuarios'
        """)
        
        if cursor.fetchone():
            print("‚úÖ Tabla 'Usuarios' existe")
            
            # Verificar columnas de la tabla Usuarios
            cursor.execute("""
                SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE 
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_NAME = 'Usuarios'
                ORDER BY ORDINAL_POSITION
            """)
            
            print("\nüìã COLUMNAS DE LA TABLA USUARIOS:")
            print("-" * 40)
            columns = cursor.fetchall()
            
            required_columns = ['UsuarioID', 'Email', 'InquilinoID', 'EmpresaID']
            found_columns = []
            
            for col in columns:
                column_name, data_type, nullable = col
                print(f"  {column_name:<15} | {data_type:<15} | {'NULL' if nullable == 'YES' else 'NOT NULL'}")
                found_columns.append(column_name)
            
            # Verificar columnas requeridas
            print(f"\nüîç VERIFICANDO COLUMNAS REQUERIDAS:")
            print("-" * 40)
            missing_columns = []
            
            for req_col in required_columns:
                if req_col in found_columns:
                    print(f"‚úÖ {req_col} - Existe")
                else:
                    print(f"‚ùå {req_col} - FALTA")
                    missing_columns.append(req_col)
            
            if missing_columns:
                print(f"\n‚ö†Ô∏è  COLUMNAS FALTANTES: {', '.join(missing_columns)}")
                print("\nüí° SQL PARA AGREGAR COLUMNAS FALTANTES:")
                print("-" * 40)
                
                for col in missing_columns:
                    if col in ['InquilinoID', 'EmpresaID']:
                        print(f"ALTER TABLE Usuarios ADD {col} INT NULL;")
                
            else:
                print("\n‚úÖ Todas las columnas requeridas est√°n presentes")
            
            # Verificar datos de ejemplo
            cursor.execute("SELECT COUNT(*) FROM Usuarios")
            user_count = cursor.fetchone()[0]
            print(f"\nüìä Total de usuarios: {user_count}")
            
            if user_count > 0:
                cursor.execute("""
                    SELECT TOP 3 UsuarioID, Email, InquilinoID, EmpresaID 
                    FROM Usuarios
                """)
                
                print("\nüë• EJEMPLOS DE USUARIOS:")
                print("-" * 60)
                print(f"{'ID':<5} | {'Email':<25} | {'InqID':<6} | {'EmpID':<6}")
                print("-" * 60)
                
                for user in cursor.fetchall():
                    uid, email, inq_id, emp_id = user
                    print(f"{uid:<5} | {email:<25} | {inq_id or 'NULL':<6} | {emp_id or 'NULL':<6}")
        
        else:
            print("‚ùå Tabla 'Usuarios' NO existe")
            return False
        
        # Verificar tabla Empresas
        print(f"\nüè¢ VERIFICANDO TABLA EMPRESAS")
        print("-" * 40)
        
        cursor.execute("""
            SELECT TABLE_NAME 
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_NAME = 'Empresas'
        """)
        
        if cursor.fetchone():
            print("‚úÖ Tabla 'Empresas' existe")
            
            cursor.execute("SELECT COUNT(*) FROM Empresas")
            empresa_count = cursor.fetchone()[0]
            print(f"üìä Total de empresas: {empresa_count}")
            
            # Verificar empresa ID 9
            cursor.execute("SELECT EmpresaID, RazonSocial, InquilinoID FROM Empresas WHERE EmpresaID = 9")
            empresa_9 = cursor.fetchone()
            
            if empresa_9:
                print(f"‚úÖ Empresa ID 9 existe: {empresa_9[1]} (Inquilino: {empresa_9[2]})")
            else:
                print("‚ùå Empresa ID 9 NO existe")
                
                # Mostrar empresas existentes
                cursor.execute("SELECT TOP 5 EmpresaID, RazonSocial, InquilinoID FROM Empresas ORDER BY EmpresaID")
                print("\nüè¢ EMPRESAS EXISTENTES:")
                print("-" * 50)
                for emp in cursor.fetchall():
                    print(f"  ID {emp[0]}: {emp[1]} (Inquilino: {emp[2]})")
        
        else:
            print("‚ùå Tabla 'Empresas' NO existe")
        
        conn.close()
        return True
        
    except pyodbc.Error as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        print("\nüí° POSIBLES SOLUCIONES:")
        print("1. Verificar que SQL Server est√© ejecut√°ndose")
        print("2. Verificar credenciales de conexi√≥n")
        print("3. Verificar nombre de la base de datos")
        print("4. Instalar ODBC Driver 17 for SQL Server")
        return False
    
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def sugerir_soluciones():
    """Sugiere pasos para resolver problemas"""
    print("\nüîß PASOS PARA RESOLVER PROBLEMAS:")
    print("=" * 50)
    print("1. **Instalar dependencias de Python:**")
    print("   pip install flask flask-cors pyodbc PyJWT Werkzeug flask-login")
    print()
    print("2. **Verificar SQL Server:**")
    print("   - Que est√© ejecut√°ndose")
    print("   - Credenciales correctas en config.py")
    print("   - Base de datos 'AgenteDigitalDB' existe")
    print()
    print("3. **Agregar columnas faltantes (si las hay):**")
    print("   ALTER TABLE Usuarios ADD InquilinoID INT NULL;")
    print("   ALTER TABLE Usuarios ADD EmpresaID INT NULL;")
    print()
    print("4. **Ejecutar servidor Flask:**")
    print("   python3 run.py")

if __name__ == "__main__":
    print("ü©∫ DIAGN√ìSTICO DE BASE DE DATOS - AGENTE DIGITAL")
    print("="*60)
    
    if verificar_esquema_usuarios():
        print("\n‚úÖ Diagn√≥stico completado exitosamente")
    else:
        print("\n‚ùå Se encontraron problemas en el diagn√≥stico")
    
    sugerir_soluciones()