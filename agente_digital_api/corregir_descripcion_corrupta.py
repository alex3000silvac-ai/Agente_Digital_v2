#!/usr/bin/env python3
"""
Script para corregir la descripci√≥n corrupta espec√≠fica y buscar otros casos similares
"""
import pyodbc
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from app.database import get_db_connection

def corregir_descripciones_corruptas():
    """Corrige descripciones con caracteres mal codificados"""
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        print("\n" + "="*70)
        print("CORRIGIENDO DESCRIPCIONES CORRUPTAS EN EVIDENCIASCUMPLIMIENTO")
        print("="*70 + "\n")
        
        # Buscar todas las descripciones con problemas
        cursor.execute("""
            SELECT 
                EvidenciaID,
                CumplimientoID,
                NombreArchivoOriginal,
                Descripcion,
                FechaSubida
            FROM EvidenciasCumplimiento
            WHERE Descripcion LIKE '%√É%'
            ORDER BY FechaSubida DESC
        """)
        
        evidencias_problematicas = cursor.fetchall()
        
        if evidencias_problematicas:
            print(f"üéØ ENCONTRADAS {len(evidencias_problematicas)} evidencias con descripciones corruptas:")
            print()
            
            correcciones = []
            
            for idx, row in enumerate(evidencias_problematicas, 1):
                evidencia_id = row[0]
                cumplimiento_id = row[1]
                nombre = row[2]
                descripcion_corrupta = row[3]
                fecha = row[4]
                
                print(f"{idx}. EvidenciaID: {evidencia_id}")
                print(f"   Archivo: {nombre}")
                print(f"   ‚ùå Descripci√≥n corrupta: {descripcion_corrupta}")
                
                # Aplicar correcciones
                descripcion_corregida = descripcion_corrupta
                
                # Correcciones espec√≠ficas para UTF-8 mal interpretado
                correcciones_utf8 = {
                    'ejecuci√É¬≥n': 'ejecuci√≥n',
                    'aplicaci√É¬≥n': 'aplicaci√≥n',
                    'soluci√É¬≥n': 'soluci√≥n',
                    'informaci√É¬≥n': 'informaci√≥n',
                    'verificaci√É¬≥n': 'verificaci√≥n',
                    'implementaci√É¬≥n': 'implementaci√≥n',
                    'operaci√É¬≥n': 'operaci√≥n',
                    'creaci√É¬≥n': 'creaci√≥n',
                    'administraci√É¬≥n': 'administraci√≥n',
                    'documentaci√É¬≥n': 'documentaci√≥n',
                    'autenticaci√É¬≥n': 'autenticaci√≥n',
                    'configuraci√É¬≥n': 'configuraci√≥n',
                    'autorizaci√É¬≥n': 'autorizaci√≥n',
                    'comunicaci√É¬≥n': 'comunicaci√≥n',
                    'coordinaci√É¬≥n': 'coordinaci√≥n',
                    'evaluaci√É¬≥n': 'evaluaci√≥n',
                    'planificaci√É¬≥n': 'planificaci√≥n',
                    'organizaci√É¬≥n': 'organizaci√≥n',
                    '√É¬°': '√°',
                    '√É¬©': '√©', 
                    '√É¬≠': '√≠',
                    '√É¬≥': '√≥',
                    '√É¬∫': '√∫',
                    '√É¬±': '√±',
                    '√É¬ø': '√ø',
                    '√É¬¢': '√¢',
                    '√É¬§': '√§',
                    '√É¬º': '√º',
                    '√É¬ß': '√ß'
                }
                
                for corrupto, correcto in correcciones_utf8.items():
                    descripcion_corregida = descripcion_corregida.replace(corrupto, correcto)
                
                print(f"   ‚úÖ Descripci√≥n corregida: {descripcion_corregida}")
                
                if descripcion_corregida != descripcion_corrupta:
                    # Escapar comillas para SQL
                    desc_escaped = descripcion_corregida.replace("'", "''")
                    sql_update = f"UPDATE EvidenciasCumplimiento SET Descripcion = '{desc_escaped}' WHERE EvidenciaID = {evidencia_id};"
                    correcciones.append({
                        'evidencia_id': evidencia_id,
                        'descripcion_original': descripcion_corrupta,
                        'descripcion_corregida': descripcion_corregida,
                        'sql': sql_update
                    })
                    print(f"   üìù Preparada correcci√≥n SQL")
                else:
                    print(f"   ‚ö†Ô∏è  No se detectaron cambios necesarios")
                
                print(f"   Fecha: {fecha}")
                print("-" * 60)
            
            # Mostrar resumen y generar script SQL
            if correcciones:
                print(f"\nüìã RESUMEN DE CORRECCIONES:")
                print(f"Total de registros a corregir: {len(correcciones)}")
                
                # Generar script SQL
                sql_script = """-- Script para corregir descripciones de evidencias con caracteres UTF-8 mal codificados
-- Generado autom√°ticamente
-- Ejecutar en SQL Server Management Studio

BEGIN TRANSACTION;

-- Mostrar registros antes de la correcci√≥n
SELECT EvidenciaID, Descripcion FROM EvidenciasCumplimiento 
WHERE EvidenciaID IN (""" + ", ".join(str(c['evidencia_id']) for c in correcciones) + """);

-- Aplicar correcciones
"""
                
                for correccion in correcciones:
                    sql_script += f"\n-- EvidenciaID {correccion['evidencia_id']}\n"
                    sql_script += f"-- Antes: {correccion['descripcion_original']}\n"
                    sql_script += f"-- Despu√©s: {correccion['descripcion_corregida']}\n"
                    sql_script += correccion['sql'] + "\n"
                
                sql_script += """
-- Mostrar registros despu√©s de la correcci√≥n
SELECT EvidenciaID, Descripcion FROM EvidenciasCumplimiento 
WHERE EvidenciaID IN (""" + ", ".join(str(c['evidencia_id']) for c in correcciones) + """);

-- ¬°IMPORTANTE! Verificar los cambios antes de confirmar
-- Si todo est√° bien, descomentar la siguiente l√≠nea:
-- COMMIT;

-- Si algo est√° mal, descomentar la siguiente l√≠nea:
-- ROLLBACK;
"""
                
                # Guardar script en archivo
                with open('corregir_descripciones_evidencias.sql', 'w', encoding='utf-8') as f:
                    f.write(sql_script)
                
                print(f"\nüíæ Script SQL guardado en: corregir_descripciones_evidencias.sql")
                
                # Opci√≥n de aplicar correcciones directamente
                print(f"\n‚ùì ¬øDeseas aplicar las correcciones ahora? (y/N): ", end="")
                respuesta = input().strip().lower()
                
                if respuesta == 'y':
                    print(f"\nüîÑ Aplicando correcciones...")
                    
                    try:
                        for correccion in correcciones:
                            cursor.execute(f"UPDATE EvidenciasCumplimiento SET Descripcion = ? WHERE EvidenciaID = ?", 
                                         (correccion['descripcion_corregida'], correccion['evidencia_id']))
                            print(f"   ‚úÖ Corregida evidencia {correccion['evidencia_id']}")
                        
                        conn.commit()
                        print(f"\n‚úÖ Todas las correcciones aplicadas exitosamente")
                        print(f"üéâ El problema 'ejecuci√É¬≥n' ya deber√≠a estar resuelto en el frontend")
                        
                    except Exception as e:
                        conn.rollback()
                        print(f"\n‚ùå Error aplicando correcciones: {e}")
                        print(f"üîÑ Cambios revertidos")
                else:
                    print(f"\nüíæ Correcciones NO aplicadas. Usa el archivo SQL para aplicarlas manualmente.")
            else:
                print(f"\n‚úÖ No se requieren correcciones")
                
        else:
            print("‚úÖ No se encontraron descripciones con caracteres corruptos")
            
    except Exception as e:
        print(f"\n‚ùå Error: {str(e)}")
        import traceback
        traceback.print_exc()
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    corregir_descripciones_corruptas()